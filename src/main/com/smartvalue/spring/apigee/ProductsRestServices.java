package com.smartvalue.spring.apigee;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.mashape.unirest.http.HttpResponse;
import com.smartvalue.apigee.resourceManager.helpers.Helper;
import com.smartvalue.apigee.rest.schema.ApigeeComman;
import com.smartvalue.apigee.rest.schema.ApigeeService;
import com.smartvalue.apigee.rest.schema.product.Product;
import com.smartvalue.apigee.rest.schema.product.ProductsServices;

@RestController
public class ProductsRestServices extends RestServices{

		    

	@GetMapping("/apigee/infras/{infra}/orgs/{org}/products/includes/proxies")
    public ResponseEntity<String> getDeployStatus(
    		@RequestHeader(required = false )   String partner,
            @RequestHeader(required = false )  String customer,
            @PathVariable  String infra,
            @PathVariable  String org,
            @RequestBody String proxyNames ,
           
            @RequestHeader("Authorization") String authorizationHeader ) 
         
	{
		try {
			initialize(partner , customer , infra , org, authorizationHeader, "");
			ProductsServices prodServ =   (ProductsServices) ms.getProductServices() ;
			List<String> proxyNamesList = Arrays.asList(proxyNames.split(",")) ;
			List<String> proxyNamesListTrimmed = new ArrayList<String>() ; 
			// Trim whitespace from each element
	        for (String aa : proxyNamesList) {
	        	proxyNamesListTrimmed.add(aa.trim()); 
	        }
			HashMap<String, ArrayList<String>> result = prodServ.getProductsUsesProxies(proxyNamesListTrimmed) ; 
			return new ResponseEntity<String>(result.toString(), HttpStatus.OK); 
   	         
    		}
		
    	catch (Exception e) {
    		return new ResponseEntity<String>(e.toString(), HttpStatus.INTERNAL_SERVER_ERROR);
    	}
	}
	
	@PutMapping("/apigee/infras/{infra}/orgs/{org}/products/processes/{operation}/wildCardScopes")
    public ResponseEntity<String> updateLegacyProductScopes(
    		@RequestHeader(required = false )   String partner,
            @RequestHeader(required = false )  String customer,
            @RequestHeader(required = false )   String migrationBasePath,
            @PathVariable  String infra,
            @PathVariable  String org,
            @PathVariable  String operation,
            @RequestHeader("Authorization") String authorizationHeader ) 
	{
		HashMap<String , String > result = new HashMap<String , String > () ; 
		try {
			initialize(partner , customer , infra , org, authorizationHeader, migrationBasePath);
			ApigeeService apigeeService =  ms.getServiceByType("products" , null) ;
    		ArrayList<String> allProductsNames = apigeeService.getAllResources() ; 
    		for (String productName : allProductsNames )
    		{	
    			ApigeeComman  apigeeComman =  apigeeService.getResource(productName , Helper.mapObjectTypeToClass("products")) ; 
    			Product  product = (Product) apigeeComman ;
    			String originalProductStr = product.toJsonString(); 
    			List<String> scopes = product.getScopes() ; 
    			List<String> proxies = product.getProxies(); 
    			boolean autoGeneratedProduct = false ;
    			try {
    				UUID.fromString(product.getName()) ; 
    				autoGeneratedProduct = true ; 
    			}
    			catch (Exception e) {}
    			if (! autoGeneratedProduct) // Start Updating the legacy products 
    			{
    				System.out.println( "Processing Product : " + productName  );
    				for (String proxy : proxies)
	    			{
	    				String proxyAllFlowsScope = proxy + "."+ Helper.WILD_CARD_OAUTHS_COPE  ;
	    				if(operation.equalsIgnoreCase("add"))
	    				{if (! scopes.contains(proxyAllFlowsScope)) scopes.add(proxyAllFlowsScope);	}
	    				else if (operation.equalsIgnoreCase("remove") )
	    				{scopes.remove(proxyAllFlowsScope); 	}
	    			}
	    			String productJsonStr = product.toJsonString(); 
	    			if (! productJsonStr.equalsIgnoreCase(originalProductStr))
	    			{
		    			String path = "/v1/organizations/"+ms.getOrgName()+"/apiproducts/"+product.getUniqueId() ; 
		    			try { Thread.sleep(1000); // 1000 milliseconds = 1 second  To Allow for Service Quota Validation 
		    			} catch (InterruptedException e) { e.printStackTrace(); }
		    			HttpResponse<String> response = ms.getPutHttpResponse(path,  productJsonStr , "application/json") ;
		    			result.put(productName, response.toString()) ;
	    			}
    			}
   			}
   		
   	        return buildJsonResponse(Helper.mapObjectToJsonStr(result) , HttpStatus.OK) ;  
    		}
		
    	catch (Exception e) {
    		return new ResponseEntity<String>(e.toString(), HttpStatus.INTERNAL_SERVER_ERROR);
    	}
	}
	
 
}